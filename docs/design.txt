Design goals:
  Expand explicitly defined macros (via \newcommand and not-difficult \*def)
  Allow specifying which packages to read into and which to treat opaquely
  Undefined macros should stay unexpanded. May need ability to specify that arguments should be left along.
  Support \newif and conditionals -> need to understand semantics of various \if commands, e.g. \ifdefined
  Allow UTF-8 input, at least, and inputenc so that math can be written verbatim (but do we expand Unicode math
  as per inputenc?)
  Allow TikZ.
  Preserve whitespace, comments, and indentation of input.
  \expandafter, \csname, and \endcsname should work, at least in idiomatic uses.
  Nested scopes are understood properly.

Document is read as a sequence of tokens and separators, where separators can be real whitespace, or comments.

Tokens and separators are mostly written verbatim to output. But there are exceptions:

 \newcommand, \def, and friends read the contained tokens but simply record a macro definition.
 \let should also record some kind of definition.
 Defined macro names are expanded according to their definition, with the arguments expanded lazily as in TeX.

Problem: hard to have a clean phase separation. Initial idea was to first pull in all the tokens and then
process them. But \input and \include require reading more tokens. Another possibility is to generate output
as we process tokens, but then in general we are processing a macro call and there is pending stuff to resolve.

Of course, processing as we go could be helpful for handling changes in tokenization rules, like
\makeatletter. But then there will need to be a notion of a stack of unresolved macro calls, and
different modes for how to handle incoming tokens.

Normal mode: tokens come in and are emitted directly. No template.
     {: emit {, push 'begin' on stack.
     }: emit }, pop stack to 'begin'.

When active macro seen: push macro / parameter template, enter macro mode

When uninterpreted macro seen: treat as regular token, emit.

In macro mode: parameter template is used to match against incoming input.
     { : current parameter push 'begin' onto stack, enter argument mode
     other characters: must match parameter template

argument mode: just collect tokens without expanding them.
     } : find matching 'begin' on stack and bind parameter to whole token sequence, go
         back to macro mode.

\expandafter: push macro onto pending stack, go into
